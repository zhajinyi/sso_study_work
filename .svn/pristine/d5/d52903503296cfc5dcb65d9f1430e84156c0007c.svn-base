package org.bureaumanager.bureaumanagerpro.sysConfig.utils;

import org.apache.shiro.authc.*;
import org.apache.shiro.authz.AuthorizationInfo;
import org.apache.shiro.authz.SimpleAuthorizationInfo;
import org.apache.shiro.realm.AuthorizingRealm;
import org.apache.shiro.subject.PrincipalCollection;
import org.bureaumanager.bureaumanagerpro.sysConfig.pojo.dto.SysMenuDto;
import org.bureaumanager.bureaumanagerpro.sysConfig.pojo.dto.SysRoleDto;
import org.bureaumanager.bureaumanagerpro.sysConfig.pojo.dto.SysUserDto;
import org.bureaumanager.bureaumanagerpro.sysConfig.service.impl.SysUserServiceImpl;
import org.springframework.beans.factory.annotation.Autowired;

import java.util.ArrayList;
import java.util.List;
import java.util.Set;

/**
 * @Author: BaoLing
 * @Date: 2019/1/3 10:45
 * @Description: AuthRealm 实现认证
 * @Version: 1.0
 */
public class AuthRealm extends AuthorizingRealm {
    @Autowired
    private SysUserServiceImpl userService;

    /*
     * 真实授权抽象方法，供子类调用
     *
     * 这个是当登陆成功之后会被调用，看当前的登陆角色是有有权限来进行操作
     * */
    @Override
    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principals) {
        //System.out.println("doGetAuthorizationInfo方法");
        SysUserDto user = (SysUserDto) principals.fromRealm(this.getClass().getName()).iterator().next();
        List<String> permissionList = new ArrayList<>();
        List<String> roleNameList = new ArrayList<>();
        List<SysRoleDto> roleList = user.getSysRoleDtos();//拿到角色
        if (!roleList.isEmpty()) {
            for(SysRoleDto role : roleList) {
                roleNameList.add(role.getName());//拿到角色
                Set<SysMenuDto> permissionSet = role.getPermissions();
                if (!permissionSet.isEmpty()) {
                    for (SysMenuDto permission : permissionSet) {
                        permissionList.add(permission.getPermission());
                    }
                }
            }
        }
        SimpleAuthorizationInfo info = new SimpleAuthorizationInfo();
        info.addStringPermissions(permissionList);//拿到权限
        info.addRoles(roleNameList);//拿到角色
        return info;
    }

    /*
     * 用于认证登录，认证接口实现方法，该方法的回调一般是通过subject.login(token)方法来实现的
     * AuthenticationToken 用于收集用户提交的身份（如用户名）及凭据（如密码）：
     * AuthenticationInfo是包含了用户根据username返回的数据信息，用于在匹马比较的时候进行相互比较
     *
     * shiro的核心是java servlet规范中的filter，通过配置拦截器，使用拦截器链来拦截请求，如果允许访问，则通过。
     * 通常情况下，系统的登录、退出会配置拦截器。登录的时候，调用subject.login(token),token是用户验证信息，
     * 这个时候会在Realm中doGetAuthenticationInfo方法中进行认证。这个时候会把用户提交的验证信息与数据库中存储的认证信息，将所有的数据拿到，在匹配器中进行比较
     * 这边是我们自己实现的CredentialMatcher类的doCredentialsMatch方法，返回true则一致，false则登陆失败
     * 退出的时候，调用subject.logout()，会清除回话信息
     *
     * */
    @Override
    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken token) throws AuthenticationException {
        //System.out.println("将用户，密码填充完UsernamePasswordToken之后，进行subject.login(token)之后");
        UsernamePasswordToken userpasswordToken = (UsernamePasswordToken) token;//这边是界面的登陆数据，将数据封装成token
        String userId = userpasswordToken.getUsername();
        SysUserDto user = userService.selectEntityByPrimaryKey(userId);
        return new SimpleAuthenticationInfo(user,user.getPassword(),this.getClass().getName());
    }

}
